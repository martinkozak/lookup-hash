#!/usr/bin/ruby
# encoding: utf-8
# (c) 2011 Martin KozÃ¡k (martinkozak@martinkozak.net)

$:.push("./lib")
require "lookup-hash"
require "lookup-hash/frozen"
require "riot"

context "LookupHash" do
    setup do 
        LookupHash[:alfa, :beta]
    end
    
    asserts("#[] (static)") do
        topic == {:alfa => true, :beta => true} 
    end
    asserts("#<<") do
        hash = topic.dup
        hash << :gama
        hash == {:alfa => true, :beta => true, :gama => true}
    end
    asserts("#[]=") do
        hash = topic.dup
        hash[:gama] = "something"
        hash == {:alfa => true, :beta => true, :gama => true}
    end
    asserts("#default=") do
        topic.default = "something"
        topic.default == false
    end
    asserts("#default_proc=") do
        topic.default_proc = "something"
        topic.default_proc.nil?
    end        
    asserts("#replace") do
        hash = topic.dup
        hash.replace(:alfa => "alfa", :beta => nil)
        hash == {:alfa => true, :beta => false}
    end
    asserts("default value") do
        topic[:gama] == false
    end
end

context "Frozen::LookupHash" do
    setup do 
        Frozen::LookupHash[:alfa, :beta]
    end
   
    asserts("non-frozen class object equivalence") do
        topic == LookupHash[:alfa, :beta]
    end
    asserts("frozen state") do
        begin
            topic.replace({:c => :d})
        rescue RuntimeError => e
            true
        end
    end
end
